Creating a simple file upload script typically involves HTML for the frontend and PHP for the backend to handle the file upload process. Here's a basic example of how you can create such a script:

### HTML Form (index.html)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple File Upload</title>
</head>
<body>
    <h2>Upload a File</h2>
    <form action="upload.php" method="post" enctype="multipart/form-data">
        <input type="file" name="fileToUpload" id="fileToUpload">
        <input type="submit" value="Upload File" name="submit">
    </form>
</body>
</html>
```

### PHP File to Handle Upload (upload.php)

```php
<?php
// Check if form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_FILES["fileToUpload"])) {
    $targetDirectory = "uploads/";
    $targetFile = $targetDirectory . basename($_FILES["fileToUpload"]["name"]);
    $uploadOk = 1;
    $imageFileType = strtolower(pathinfo($targetFile, PATHINFO_EXTENSION));

    // Check if file already exists
    if (file_exists($targetFile)) {
        echo "Sorry, file already exists.";
        $uploadOk = 0;
    }

    // Check file size (limit to 5MB in this example)
    if ($_FILES["fileToUpload"]["size"] > 5 * 1024 * 1024) {
        echo "Sorry, your file is too large.";
        $uploadOk = 0;
    }

    // Allow only certain file formats (you can adjust/add formats as needed)
    if ($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
        && $imageFileType != "gif" && $imageFileType != "pdf") {
        echo "Sorry, only JPG, JPEG, PNG, GIF, and PDF files are allowed.";
        $uploadOk = 0;
    }

    // Check if $uploadOk is set to 0 by an error
    if ($uploadOk == 0) {
        echo "Sorry, your file was not uploaded.";
    } else {
        // Attempt to upload file
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $targetFile)) {
            echo "The file ". basename( $_FILES["fileToUpload"]["name"]). " has been uploaded.";
        } else {
            echo "Sorry, there was an error uploading your file.";
        }
    }
}
?>
```

### Explanation:

1. **HTML Form (`index.html`)**:
   - Provides a simple form with an input for file selection and a submit button.
   - Form is submitted to `upload.php` using the POST method and `enctype="multipart/form-data"` for file uploads.

2. **PHP File (`upload.php`)**:
   - Checks if the form was submitted (`$_SERVER["REQUEST_METHOD"] == "POST"`).
   - Defines a target directory (`uploads/` in this example) where the uploaded file will be stored.
   - Checks various conditions:
     - Whether a file with the same name already exists.
     - Whether the file size exceeds a specified limit (5MB in this example).
     - Whether the file type is allowed (JPG, JPEG, PNG, GIF, PDF in this example).
   - If all checks pass (`$uploadOk == 1`), the file is moved from its temporary location (`$_FILES["fileToUpload"]["tmp_name"]`) to the target directory using `move_uploaded_file()`.

3. **Notes**:
   - Adjust file size limits and allowed file types according to your requirements.
   - Ensure the target directory (`uploads/` in this case) is writable by the web server.
   - This example provides basic error handling and messages for common scenarios, but you might want to enhance error handling based on your specific needs.

By using the above code snippets, you can create a simple file upload script that allows users to upload files via a web form.
